{"ast":null,"code":"import * as ActionTypes from '../ActionTypes';\nimport { RegisterUserService, LoginUserService, LogOutUserService } from '../../services/AuthServices';\nexport const RegisterAction = credentials => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    dispatch({\n      type: ActionTypes.LOADING\n    });\n    RegisterUserService(credentials).then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        dispatch({\n          type: ActionTypes.SIGNUP_SUCCESS,\n          res\n        });\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.SIGNUP_ERROR,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c = RegisterAction;\nexport const LoginAction = (credentials, history) => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    dispatch({\n      type: ActionTypes.LOADING\n    }); //console.log(history);\n\n    LoginUserService(credentials).then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        localStorage.setItem('user-token', res.token);\n        dispatch({\n          type: ActionTypes.LOGIN_SUCCESS\n        });\n        setTimeout(() => {\n          history.push('/user');\n        }, 1500);\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.LOGIN_ERROR,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c2 = LoginAction;\nexport const LogoutAction = () => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    LogOutUserService().then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        dispatch({\n          type: ActionTypes.LOGOUT_SUCCESS,\n          res\n        });\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.LOGOUT_SUCCESS,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c3 = LogoutAction;\nexport const ClearAuthStateAction = () => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n  };\n};\n_c4 = ClearAuthStateAction;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"RegisterAction\");\n$RefreshReg$(_c2, \"LoginAction\");\n$RefreshReg$(_c3, \"LogoutAction\");\n$RefreshReg$(_c4, \"ClearAuthStateAction\");","map":{"version":3,"sources":["C:/xampp/htdocs/Projeto/Frontend-ReactJs/src/redux/actions/AuthActions.js"],"names":["ActionTypes","RegisterUserService","LoginUserService","LogOutUserService","RegisterAction","credentials","dispatch","type","RESTART_AUTH_RESPONSE","LOADING","then","res","hasOwnProperty","success","SIGNUP_SUCCESS","SIGNUP_ERROR","error","CODE_ERROR","LoginAction","history","localStorage","setItem","token","LOGIN_SUCCESS","setTimeout","push","LOGIN_ERROR","LogoutAction","LOGOUT_SUCCESS","ClearAuthStateAction"],"mappings":"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","sourcesContent":["import * as ActionTypes from '../ActionTypes';\r\nimport {RegisterUserService, LoginUserService, LogOutUserService} from '../../services/AuthServices';\r\n\r\n\r\nexport const RegisterAction = (credentials) => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n        dispatch({type: ActionTypes.LOADING});\r\n\r\n        RegisterUserService(credentials).then((res) => {\r\n            if(res.hasOwnProperty('success') && res.success === true){\r\n                dispatch({type: ActionTypes.SIGNUP_SUCCESS, res});\r\n\r\n            }else if(res.hasOwnProperty('success') && res.success === false){\r\n                dispatch({type: ActionTypes.SIGNUP_ERROR,res});\r\n            }\r\n        }, error => {\r\n            dispatch({type : ActionTypes.CODE_ERROR, error})\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const LoginAction = (credentials, history) => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n        dispatch({type: ActionTypes.LOADING});\r\n        //console.log(history);\r\n\r\n        LoginUserService(credentials).then((res) => {\r\n             \r\n            if(res.hasOwnProperty('success') && res.success === true){\r\n                localStorage.setItem('user-token',res.token)\r\n\r\n                dispatch({type: ActionTypes.LOGIN_SUCCESS});\r\n\r\n                setTimeout(() => {\r\n                    history.push('/user');\r\n                },1500);\r\n\r\n            }else if(res.hasOwnProperty('success') && res.success === false){\r\n                dispatch({type: ActionTypes.LOGIN_ERROR,res});\r\n            }\r\n            \r\n        }, error => {\r\n            dispatch({type : ActionTypes.CODE_ERROR, error})\r\n        })   \r\n    }\r\n}\r\n\r\n\r\nexport const LogoutAction = () => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n\r\n        LogOutUserService().then((res) => {\r\n\r\n            if(res.hasOwnProperty('success') && res.success === true){\r\n                dispatch({type: ActionTypes.LOGOUT_SUCCESS,res});\r\n\r\n            }else if(res.hasOwnProperty('success') && res.success === false){\r\n                dispatch({type: ActionTypes.LOGOUT_SUCCESS,res});\r\n            }\r\n        }, error => {\r\n            dispatch({type : ActionTypes.CODE_ERROR, error})\r\n        })\r\n    }\r\n}\r\n\r\nexport const ClearAuthStateAction = () => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}