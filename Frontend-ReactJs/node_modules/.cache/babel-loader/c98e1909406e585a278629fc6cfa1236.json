{"ast":null,"code":"import * as ActionTypes from '../ActionTypes';\nimport { RegisterUserService, RegisterUserAddressService, RegisterUserImageService, LoginUserService, LogOutUserService } from '../../services/AuthServices';\nexport const RegisterAction = credentials => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    dispatch({\n      type: ActionTypes.LOADING\n    });\n    RegisterUserService(credentials).then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        dispatch({\n          type: ActionTypes.SIGNUP_SUCCESS,\n          res\n        });\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.SIGNUP_ERROR,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c = RegisterAction;\nexport const RegisterActionAddress = credentials => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    dispatch({\n      type: ActionTypes.LOADING\n    });\n    RegisterUserAddressService(credentials).then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        dispatch({\n          type: ActionTypes.SIGNUP_SUCCESS,\n          res\n        });\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.SIGNUP_ERROR,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c2 = RegisterActionAddress;\nexport const RegisterActionImage = credentials => {\n  return dispatch => {\n    RegisterUserImageService(credentials).then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        dispatch({\n          type: ActionTypes.SIGNUP_SUCCESS,\n          res\n        });\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.SIGNUP_ERROR,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c3 = RegisterActionImage;\nexport const LoginAction = (credentials, history) => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    dispatch({\n      type: ActionTypes.LOADING\n    }); //console.log(history);\n\n    LoginUserService(credentials).then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        localStorage.setItem('user-token', res.token);\n        dispatch({\n          type: ActionTypes.LOGIN_SUCCESS\n        });\n        setTimeout(() => {\n          history.push('/user');\n        }, 1500);\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.LOGIN_ERROR,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c4 = LoginAction;\nexport const LogoutAction = () => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n    LogOutUserService().then(res => {\n      if (res.hasOwnProperty('success') && res.success === true) {\n        dispatch({\n          type: ActionTypes.LOGOUT_SUCCESS,\n          res\n        });\n      } else if (res.hasOwnProperty('success') && res.success === false) {\n        dispatch({\n          type: ActionTypes.LOGOUT_SUCCESS,\n          res\n        });\n      }\n    }, error => {\n      dispatch({\n        type: ActionTypes.CODE_ERROR,\n        error\n      });\n    });\n  };\n};\n_c5 = LogoutAction;\nexport const ClearAuthStateAction = () => {\n  return dispatch => {\n    dispatch({\n      type: ActionTypes.RESTART_AUTH_RESPONSE\n    });\n  };\n};\n_c6 = ClearAuthStateAction;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"RegisterAction\");\n$RefreshReg$(_c2, \"RegisterActionAddress\");\n$RefreshReg$(_c3, \"RegisterActionImage\");\n$RefreshReg$(_c4, \"LoginAction\");\n$RefreshReg$(_c5, \"LogoutAction\");\n$RefreshReg$(_c6, \"ClearAuthStateAction\");","map":{"version":3,"sources":["C:/xampp/htdocs/Projeto/Frontend-ReactJs/src/redux/actions/AuthActions.js"],"names":["ActionTypes","RegisterUserService","RegisterUserAddressService","RegisterUserImageService","LoginUserService","LogOutUserService","RegisterAction","credentials","dispatch","type","RESTART_AUTH_RESPONSE","LOADING","then","res","hasOwnProperty","success","SIGNUP_SUCCESS","SIGNUP_ERROR","error","CODE_ERROR","RegisterActionAddress","RegisterActionImage","LoginAction","history","localStorage","setItem","token","LOGIN_SUCCESS","setTimeout","push","LOGIN_ERROR","LogoutAction","LOGOUT_SUCCESS","ClearAuthStateAction"],"mappings":"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","sourcesContent":["import * as ActionTypes from '../ActionTypes';\r\nimport {RegisterUserService, RegisterUserAddressService, RegisterUserImageService, LoginUserService, LogOutUserService} from '../../services/AuthServices';\r\n\r\n\r\nexport const RegisterAction = (credentials) => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n        dispatch({type: ActionTypes.LOADING});\r\n\r\n        RegisterUserService(credentials).then((res) => {\r\n            if(res.hasOwnProperty('success') && res.success === true){\r\n                dispatch({type: ActionTypes.SIGNUP_SUCCESS, res});\r\n\r\n            }else if(res.hasOwnProperty('success') && res.success === false){\r\n                dispatch({type: ActionTypes.SIGNUP_ERROR,res});\r\n            }\r\n        }, error => {\r\n            dispatch({type : ActionTypes.CODE_ERROR, error})\r\n        })\r\n    }\r\n}\r\nexport const RegisterActionAddress = (credentials) => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n        dispatch({type: ActionTypes.LOADING});\r\n\r\n        RegisterUserAddressService(credentials).then((res) => {\r\n            if(res.hasOwnProperty('success') && res.success === true){\r\n                dispatch({type: ActionTypes.SIGNUP_SUCCESS, res});\r\n\r\n            }else if(res.hasOwnProperty('success') && res.success === false){\r\n                dispatch({type: ActionTypes.SIGNUP_ERROR,res});\r\n            }\r\n        }, error => {\r\n            dispatch({type : ActionTypes.CODE_ERROR, error})\r\n        })\r\n    }\r\n}\r\n\r\nexport const RegisterActionImage = (credentials) => {\r\n    return (dispatch) => {\r\n\r\n        RegisterUserImageService(credentials).then((res) => {\r\n            if(res.hasOwnProperty('success') && res.success === true){\r\n                dispatch({type: ActionTypes.SIGNUP_SUCCESS, res});\r\n\r\n            }else if(res.hasOwnProperty('success') && res.success === false){\r\n                dispatch({type: ActionTypes.SIGNUP_ERROR,res});\r\n            }\r\n        }, error => {\r\n            dispatch({type : ActionTypes.CODE_ERROR, error})\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const LoginAction = (credentials, history) => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n        dispatch({type: ActionTypes.LOADING});\r\n        //console.log(history);\r\n\r\n        LoginUserService(credentials).then((res) => {\r\n             \r\n            if(res.hasOwnProperty('success') && res.success === true){\r\n                localStorage.setItem('user-token',res.token)\r\n\r\n                dispatch({type: ActionTypes.LOGIN_SUCCESS});\r\n\r\n                setTimeout(() => {\r\n                    history.push('/user');\r\n                },1500);\r\n\r\n            }else if(res.hasOwnProperty('success') && res.success === false){\r\n                dispatch({type: ActionTypes.LOGIN_ERROR,res});\r\n            }\r\n        }, error => {\r\n            dispatch({type : ActionTypes.CODE_ERROR, error})\r\n        })   \r\n    }\r\n}\r\n\r\n\r\nexport const LogoutAction = () => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n\r\n        LogOutUserService().then((res) => {\r\n\r\n            if(res.hasOwnProperty('success') && res.success === true){\r\n                dispatch({type: ActionTypes.LOGOUT_SUCCESS,res});\r\n\r\n            }else if(res.hasOwnProperty('success') && res.success === false){\r\n                dispatch({type: ActionTypes.LOGOUT_SUCCESS,res});\r\n            }\r\n        }, error => {\r\n            dispatch({type : ActionTypes.CODE_ERROR, error})\r\n        })\r\n    }\r\n}\r\n\r\nexport const ClearAuthStateAction = () => {\r\n    return (dispatch) => {\r\n        dispatch({type: ActionTypes.RESTART_AUTH_RESPONSE});\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}